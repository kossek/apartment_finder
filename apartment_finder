from craigslist import CraigslistHousing
from slackclient import SlackClient
import math
import json

SITE="chicago"
CATEGORY="apa"
AREA="chc"
FILTERS={'min_price': 1000, 'max_price': 2000}

CONFIG_FILE = 'config.json'

LOGAN_SQUARE = [
                [41.913549, -87.73146] ,
                [41.932179, -87.687316]
               ]
WICKER_PARK = [
                [41.903015, -87.687378],
                [41.914318, -87.66753]
              ]
BUCKTOWN = [
            [41.913582, -87.687987],
            [41.936104, -87.66362]
           ]
LAKEVIEW = [
            [41.932343, -87.673988],
            [41.961652, -87.630129]
           ]
           
LINCOLN_PARK = [
                [41.910785, -87.68285],
                [41.933015, -87.620076]
               ]
   
NEIGHBORHOOD_COORDS = {
                        'Logan Square': LOGAN_SQUARE, 
                        'Wicker Park': WICKER_PARK, 
                        'Bucktown': BUCKTOWN,
                        'Lakeview': LAKEVIEW,
                        'Lincoln Park': LINCOLN_PARK
                      }

CTA_STATIONS = {
                'Damen': [41.9099186, -87.67762199999999],
                'Division': [41.9033574, -87.66645340000002],
                'Western' : [41.915888, -87.68774300000001],
                'Fullerton' : [41.92529760000001, -87.65277479999997],
                'Belmont' : [41.9397207, -87.6534661],
                'Addison' : [41.947513, -87.65358800000001]
                }


class ListingResult:
    def __init__(self, result):
        self.cl_result = result
        self.area = ""
        self.cta_dist = float('NaN')
        self.cta_station = "???"

def in_box(coords, box):
    if not coords or not box:
        return False

    if box[0][0] <= coords[0] <= box[1][0] and box[0][1] <= coords[1] <= box[1][1]:
        return True
    return False

def get_area(result):
    geotag = result["geotag"]
    area_found = False
    area = ""
    for area, coords in NEIGHBORHOOD_COORDS.items():
        if in_box(geotag, coords):
            return area
    
def get_reported_area(result):
    location = result["where"]
    for area, coords in NEIGHBORHOOD_COORDS.iteritems():
        if area and coords:
            if area.lower() in location.lower():
                return area
    
def set_area(dec_result, area, reported_area):
    if area:
        dec_result.area = area
    elif reported_area:
        dec_result.area = reported_area
    
def coord_distance(x1,y1,x2,y2):
    dist = math.sqrt((x2 - x1)**2 + (y2 - y1)**2)
    return dist

def km_to_mi(km):
    CONVERSION_FACTOR = 0.621371
    return CONVERSION_FACTOR * km
     
def set_cta_dist(dec_result):
    near_cta = False
    cta_dist = float('NaN')
    cta_name = "" 
    MAX_TRANSIT_DIST_KM = 0.804672

    geotag = dec_result.cl_result["geotag"]
    if not geotag:
        return
    for station, coords in CTA_STATIONS.items():
        dist = coord_distance(coords[0], coords[1], geotag[0], geotag[1])
        if dist < MAX_TRANSIT_DIST_KM:
            if (math.isnan(cta_dist) or dist < cta_dist):
                cta_name = station
                near_cta = True
                cta_dist = dist

    dec_result.cta_dist = km_to_mi(cta_dist)
    dec_result.cta_station = cta_name
    
def load_listings_from_craigslist(craigslist):
    NUM_LISTINGS_TO_SCRAPE = 5
    results = craigslist.get_results(sort_by='newest', geotagged=True, limit=NUM_LISTINGS_TO_SCRAPE)
    listing_results = []
    for result in results:
        dec_result = ListingResult(result)
        set_area(dec_result, get_area(result), get_reported_area(result))
        set_cta_dist(dec_result)
        listing_results.append(dec_result)
    return listing_results
   
def is_eligible_listing(listing):
        return listing.area

def output_to_slack(listing_results, slack_token, slack_channel):
    sc = SlackClient(slack_token)

    for dec_result in listing_results:
        result = dec_result.cl_result
        print result
        if not is_eligible_listing(dec_result):
            continue
        desc = "{0} | {1} | {2}: {3:.2f} mi | {4} | <{5}>".format(
                        result["price"], 
                        dec_result.area, 
                        dec_result.cta_station, 
                        dec_result.cta_dist, 
                        result["name"], 
                        result["url"])
        sc.api_call(
            "chat.postMessage", channel=slack_channel, text=desc, username='pybot', icon_emoji=':robot_face:'
        )
    
def main(slack_token, slack_channel):
    craigslist = CraigslistHousing (site = SITE, area = AREA, category = CATEGORY, filters = FILTERS )
    results = load_listings_from_craigslist(craigslist)
    output_to_slack(results, slack_token, slack_channel)
    
if __name__ == '__main__':
    with open(CONFIG_FILE) as config_file:
        data = json.load(config_file)
        slack_token = data["slack_token"]
        slack_channel = data["slack_channel"]
    main(slack_token, slack_channel)